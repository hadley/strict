[{"path":"https://hadley.github.io/strict/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 strict authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hadley.github.io/strict/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hadley Wickham. Author, maintainer. Posit Software, PBC. Copyright holder, funder.","code":""},{"path":"https://hadley.github.io/strict/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wickham H (2025). strict: Make R Just Little Stricter. R package version 0.0.0.9000, https://github.com/hadley/strict.","code":"@Manual{,   title = {strict: Make R Just a Little Stricter},   author = {Hadley Wickham},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://github.com/hadley/strict}, }"},{"path":"https://hadley.github.io/strict/index.html","id":"strict","dir":"","previous_headings":"","what":"Make R Just a Little Stricter","title":"Make R Just a Little Stricter","text":"goal strict make R behave little strictly, making base functions likely throw error rather returning potentially ambiguous results. library(strict) forces confront potential problems now, instead future. pros cons: often can easily fix potential ambiguity working code (rather six months time ’ve forgotten works), also forces resolve ambiguities might never occur code/data.","code":""},{"path":"https://hadley.github.io/strict/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Make R Just a Little Stricter","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"hadley/strict\")"},{"path":"https://hadley.github.io/strict/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Make R Just a Little Stricter","text":"library(strict) affects code current script/session (.e. doesn’t affect code others packages). alternative conflict resolution mechanism. Instead warning conflicts package load letting last loaded package win, strict throws error access ambiguous functions: (Thanks @krlmlr neat idea!) Shims functions “risky” arguments, .e. arguments either rely global options (like stringsAsFactors) computed defaults 90% evaluate one thing (like drop). strict forces supply values arguments. Automatically sets options warn partial matching occurs. T F generate errors, forcing use TRUE FALSE. sapply() throws error suggesting use type-safe vapply() instead. apply() throws error use data frame. : throw error instead creating decreasing sequence terminates 0. diag() sample() throw error given scalar x. avoids otherwise unpleasant surprise. strict loaded, can continue run code lax manner using lax().","code":"library(strict) library(plyr) library(Hmisc) #> Error in library(package, help = help, pos = pos, lib.loc = lib.loc, character.only = TRUE, : there is no package called 'Hmisc'  is.discrete #> function (x)  #> is.factor(x) || is.character(x) || is.logical(x) #> <bytecode: 0x1068481a0> #> <environment: namespace:plyr> library(strict) mtcars[, 1] #>  [1] 21.0 21.0 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 17.8 16.4 17.3 15.2 10.4 #> [16] 10.4 14.7 32.4 30.4 33.9 21.5 15.5 15.2 13.3 19.2 27.3 26.0 30.4 15.8 19.7 #> [31] 15.0 21.4  data.frame(x = \"a\") #> Error in `strict_abort()` at strict/R/shim-risky.R:10:3: #> ! [strict] #> Please supply a value for `stringsAsFactors` argument. #> Please see ?strict_arg for more details library(strict)  df <- data.frame(xyz = 1) df$x #> Warning in df$x: partial match of 'x' to 'xyz' #> [1] 1 library(strict) T #> Error in `strict_abort()` at strict/R/shims.R:22:9: #> ! [strict] #> Please use TRUE, not T library(strict) sapply(1:10, sum) #> Error in `strict_abort()` at strict/R/shim-apply.R:30:3: #> ! [strict] #> Please use `vapply()` instead of `sapply()`. #> Please see ?strict_sapply for more details library(strict)  x <- numeric() 1:length(x) #> Error in `strict_abort()` at strict/R/shim-colon.R:15:5: #> ! [strict] #> Tried to create descending sequence 1:0. Do you want to `seq_along()` instead? #>  #> Please see ?shim_colon for more details library(strict)  sample(5:3) #> [1] 5 3 4 sample(5:4) #> [1] 5 4 lax(sample(5:5)) #> [1] 4 2 1 3 5  sample(5:5) #> Error in `strict_abort()` at strict/R/shim-scalar.R:30:5: #> ! [strict] #> `sample()` has surprising behaviour when `x` is a scalar. #> Use `sample.int()` instead. #> Please see ?strict_sample for more details"},{"path":"https://hadley.github.io/strict/reference/is_strict.html","id":null,"dir":"Reference","previous_headings":"","what":"Is code run in a strict environment? — is_strict","title":"Is code run in a strict environment? — is_strict","text":"code run strict environment?","code":""},{"path":"https://hadley.github.io/strict/reference/is_strict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is code run in a strict environment? — is_strict","text":"","code":"is_strict()"},{"path":"https://hadley.github.io/strict/reference/lax.html","id":null,"dir":"Reference","previous_headings":"","what":"Be lax in an otherwise strict environment — lax","title":"Be lax in an otherwise strict environment — lax","text":"temporarily removes shims added strict can execute code otherwise allowed","code":""},{"path":"https://hadley.github.io/strict/reference/lax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Be lax in an otherwise strict environment — lax","text":"","code":"lax(code)"},{"path":"https://hadley.github.io/strict/reference/lax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Be lax in an otherwise strict environment — lax","text":"code Code execute.","code":""},{"path":"https://hadley.github.io/strict/reference/lax.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Be lax in an otherwise strict environment — lax","text":"","code":"lax({   mtcars[, 1]    sapply(1:10, runif) }) #> [[1]] #> [1] 0.08075014 #>  #> [[2]] #> [1] 0.8343330 0.6007609 #>  #> [[3]] #> [1] 0.157208442 0.007399441 0.466393497 #>  #> [[4]] #> [1] 0.4977774 0.2897672 0.7328820 0.7725215 #>  #> [[5]] #> [1] 0.87460066 0.17494063 0.03424133 0.32038573 0.40232824 #>  #> [[6]] #> [1] 0.19566983 0.40353812 0.06366146 0.38870131 0.97554784 0.28989230 #>  #> [[7]] #> [1] 0.67838043 0.73531960 0.19595673 0.98053967 0.74152153 0.05144628 0.53021246 #>  #> [[8]] #> [1] 0.69582388 0.68855600 0.03123033 0.22556253 0.30083081 0.63646561 0.47902455 #> [8] 0.43217126 #>  #> [[9]] #> [1] 0.70643384 0.94857658 0.18033877 0.21689988 0.68016292 0.49884561 0.64167935 #> [8] 0.66028435 0.09602416 #>  #> [[10]] #>  [1] 0.7656002 0.7696748 0.9907123 0.9705209 0.3891828 0.4611865 0.3152418 #>  [8] 0.1746759 0.5315735 0.4936370 #>"},{"path":"https://hadley.github.io/strict/reference/shim_colon.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict version of : — shim_colon","title":"Strict version of : — shim_colon","text":"version : throws error positive zero, make error obvious used 1:length(x) instead seq_along()","code":""},{"path":"https://hadley.github.io/strict/reference/shim_colon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict version of : — shim_colon","text":"","code":"shim_colon(from, to)"},{"path":"https://hadley.github.io/strict/reference/shim_colon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict version of : — shim_colon","text":", Passed seq()","code":""},{"path":"https://hadley.github.io/strict/reference/shim_colon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strict version of : — shim_colon","text":"","code":"x <- numeric() seq_along(x) #> integer(0) lax(1:length(x)) #> [1] 1 0"},{"path":"https://hadley.github.io/strict/reference/strict-package.html","id":null,"dir":"Reference","previous_headings":"","what":"strict: Make R Just a Little Stricter — strict-package","title":"strict: Make R Just a Little Stricter — strict-package","text":"packages tweaks operation base R code make things little stricter.","code":""},{"path":[]},{"path":"https://hadley.github.io/strict/reference/strict-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"strict: Make R Just a Little Stricter — strict-package","text":"Maintainer: Hadley Wickham hadley@posit.co contributors: Posit Software, PBC (03wc8by49) [copyright holder, funder]","code":""},{"path":"https://hadley.github.io/strict/reference/strict_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict version of apply() — strict_apply","title":"Strict version of apply() — strict_apply","text":"bad idea use apply() data frames coerces input matrix. generally leads poor performance, give unexpected results data frame gains non-numeric columns future","code":""},{"path":"https://hadley.github.io/strict/reference/strict_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict version of apply() — strict_apply","text":"","code":"strict_apply(X, MARGIN, FUN, ...)"},{"path":"https://hadley.github.io/strict/reference/strict_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict version of apply() — strict_apply","text":"X, MARGIN, FUN, ... Passed apply()","code":""},{"path":"https://hadley.github.io/strict/reference/strict_arg.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict arguments — strict_arg","title":"Strict arguments — strict_arg","text":"number functions base R defaults depend global option, complicated expression. shims force specify value arguments","code":""},{"path":"https://hadley.github.io/strict/reference/strict_arg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict arguments — strict_arg","text":"","code":"strict_arg(name)  strict_drop(j)"},{"path":"https://hadley.github.io/strict/reference/strict_arg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict arguments — strict_arg","text":"name Name argument j Columns select","code":""},{"path":"https://hadley.github.io/strict/reference/strict_deactivate.html","id":null,"dir":"Reference","previous_headings":"","what":"Manually activate and deactive strict mode — strict_deactivate","title":"Manually activate and deactive strict mode — strict_deactivate","text":"experts .","code":""},{"path":"https://hadley.github.io/strict/reference/strict_deactivate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manually activate and deactive strict mode — strict_deactivate","text":"","code":"strict_deactivate()  strict_activate()"},{"path":"https://hadley.github.io/strict/reference/strict_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict behaviour for functions with special scalar behaviour — strict_sample","title":"Strict behaviour for functions with special scalar behaviour — strict_sample","text":"sample() diag() behave differently depending whether first argument scalar function. shims throw error given scalar force pick safer alternative.","code":""},{"path":"https://hadley.github.io/strict/reference/strict_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict behaviour for functions with special scalar behaviour — strict_sample","text":"","code":"strict_sample(x, size = length(x), replace = FALSE, prob = NULL)  strict_diag(x = 1, nrow, ncol)"},{"path":"https://hadley.github.io/strict/reference/strict_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict behaviour for functions with special scalar behaviour — strict_sample","text":"x, size, replace, prob, nrow, ncol Passed sample() diag()","code":""},{"path":"https://hadley.github.io/strict/reference/strict_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strict behaviour for functions with special scalar behaviour — strict_sample","text":"","code":"lax({   sample(5:3)   sample(5:4)   sample(5:5)    diag(5:3)   diag(5:4)   diag(5:5) }) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    0    0    0    0 #> [2,]    0    1    0    0    0 #> [3,]    0    0    1    0    0 #> [4,]    0    0    0    1    0 #> [5,]    0    0    0    0    1  if (FALSE) { # \\dontrun{   sample(5:5)   diag(5) } # }"},{"path":"https://hadley.github.io/strict/reference/strict_sapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Strict version of sapply() — strict_sapply","title":"Strict version of sapply() — strict_sapply","text":"sapply() dangerous programmatic usage type-unstable: predict advance going return just reading code. Instead use vapply(), additional argument FUN.VALUE, ","code":""},{"path":"https://hadley.github.io/strict/reference/strict_sapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strict version of sapply() — strict_sapply","text":"","code":"strict_sapply(...)"},{"path":"https://hadley.github.io/strict/reference/strict_sapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strict version of sapply() — strict_sapply","text":"... Ignored","code":""},{"path":"https://hadley.github.io/strict/reference/strict_sapply.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Strict version of sapply() — strict_sapply","text":"","code":"df <- data.frame(  a = 1,  b = \"a\",  c = Sys.time(),  d = ordered(\"a\"),  stringsAsFactors = FALSE )  # A list base::sapply(df, class) #> $a #> [1] \"numeric\" #>  #> $b #> [1] \"character\" #>  #> $c #> [1] \"POSIXct\" \"POSIXt\"  #>  #> $d #> [1] \"ordered\" \"factor\"  #>  # A matrix base::sapply(df[3:4], class) #>      c         d         #> [1,] \"POSIXct\" \"ordered\" #> [2,] \"POSIXt\"  \"factor\"  # A vector base::sapply(df[1:2], class) #>           a           b  #>   \"numeric\" \"character\""}]
